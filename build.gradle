// Gradle plugins
buildscript {
    repositories {
        jcenter()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }

    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.1-20160116.192356-17'
        classpath('nl.javadude.gradle.plugins:license-gradle-plugin:0.11.0') {
            exclude module: 'guava'
        }
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'org.spongepowered:spongegradle:0.5.1'
        classpath 'org.spongepowered:mixingradle:0.3-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle.tweaker-server'

// Apply shared implementation Gradle config
apply from: project(':SpongeCommon').file('gradle/implementation.gradle')

minecraft {
    version = '1.8.9'
    tweakClass = 'org.spongepowered.server.launch.VanillaServerTweaker'
}
ats += 'vanilla_at.cfg'

version = "$minecraft.version-$apiSuffix-$buildNumber"

configurations {
    // While we could set this to 'runtime', Eclipse doesn't support runtime dependencies
    // properly so this was always going before 'compile' in Eclipse
    shadow
}

configurations.compile {
    exclude module: 'asm'
    exclude module: 'asm-commons'
}

repositories {
     mavenLocal()
}

dependencies {
    compile 'ch.vorburger.hotea.minecraft:HotPluginManager-API:1.0.0'

    compile 'org.ow2.asm:asm-debug-all:5.1'
    compile 'net.sf.jopt-simple:jopt-simple:4.9'
    compile 'jline:jline:2.13'

    shadow 'org.ow2.asm:asm-all:5.1'
}

// Set main class and classpath for Minecraft server and Launchwrapper
jar {
    manifest {
        attributes(
                'Main-Class': 'org.spongepowered.server.launch.VersionCheckingMain',
                'Class-Path': 'minecraft_server.1.8.9.jar libraries/net/minecraft/launchwrapper/1.12/launchwrapper-1.12.jar'
        )
    }
}

ext.anonInnerClassSrg = file('anon_inner_classes.srg')
configure([mixin, common.mixin]) {
    extraSrgFile 'searge', anonInnerClassSrg
}

shadowJar {
    // Include production log4j2.xml
    exclude 'log4j2.xml'
    rename 'log4j2_prod.xml', 'log4j2.xml'

    configurations += [project.configurations.shadow]

    from plugins.getPlugin('net.minecraftforge.gradle.tweaker-server').delayedFile(net.minecraftforge.gradle.common.Constants.MCP_DATA_SRG)
    rename 'joined.srg', 'mappings.srg'

    dependencies {
        include dependency('ch.vorburger.hotea.minecraft:HotPluginManager-API')

        include dependency('net.sf.trove4j:trove4j')

        include dependency('net.sf.jopt-simple:jopt-simple')
        include dependency('org.ow2.asm:asm-all')

        include dependency('com.typesafe:config')

        include dependency('jline:jline')
    }
}

task('genAnonInnerClassMappings', type: GenerateAnonInnerClassMappings) {
    dependsOn 'setupDecompWorkspace'
    outFile = anonInnerClassSrg
}

afterEvaluate {
    genAnonInnerClassMappings {
        deobfJar = decompileMc.inJar
        recompJar = recompileMc.outJar
    }
}
